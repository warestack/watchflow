[tool.ruff]
# Target Python version
target-version = "py312"
# Line length - restored from old config
line-length = 120
# Indent width
indent-width = 4

# Exclude common directories - restored from old config
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
# Select a comprehensive set of rules
# Based on recommended practices from Ruff documentation
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

# Common ignores for web development
ignore = [
    "E501", # line too long (handled by formatter)
    "B008", # do not perform function calls in argument defaults (common in FastAPI)
]

# Allow fixing all enabled rules
fixable = ["ALL"]

# Allow unused variables when underscore-prefixed - restored from old config
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Modern formatting options
quote-style = "double"
indent-style = "space"
# Format docstring code blocks
docstring-code-format = true
# Restored from old config
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
# Enhanced isort configuration
known-first-party = ["src"]
# Make sure we correctly order the import sections
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
# Add a trailing comma to imports split across multiple lines
split-on-trailing-comma = true
# Combine import statements for the same module
combine-as-imports = true

[project]
name = "watchflow"
version = "0.1.0"
description = "Agentic GitHub Guardrails"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "Apache Software License 2.0"}
authors = [
    {name = "Dimitris Kargatzis", email = "dimitris.kargatzis@warestack.com"},
]
keywords = ["github", "governance", "ai", "protection", "rules", "enforcement", "collaboration"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
]

dependencies = [
    "fastapi[standard]>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "python-dotenv>=1.0.0",
    "aiohttp>=3.9.0",
    "httpx>=0.25.0",
    "pyjwt[crypto]>=2.8.0",
    "cachetools>=5.3.0",
    "pyyaml>=6.0.1",
    "langchain-openai>=0.0.5",
    "langgraph>=0.0.20",
    "openai>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

docs = [
    "mkdocs-material>=9.5.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2.0",
    "mkdocs-minify-plugin>=0.7.0",
    "pymdown-extensions>=10.0",
]

[project.urls]
Homepage = "https://github.com/warestack/watchflow"
Documentation = "https://docs.watchflow.dev"
Repository = "https://github.com/warestack/watchflow"
Issues = "https://github.com/warestack/watchflow/issues"

[project.scripts]
watchflow = "src.main:app"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
asyncio_mode = "auto"


[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2.0",
    "mkdocs-minify-plugin>=0.7.0",
    "pymdown-extensions>=10.0",
]
